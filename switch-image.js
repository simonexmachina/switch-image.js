// Generated by CoffeeScript 1.3.3
(function() {
  var $, SwitchImage, defaults, jQueryWidget, namespace;

  namespace = 'switchImage';

  $ = jQuery;

  defaults = {
    selector: 'img',
    targetSelector: 'img',
    defaultState: 'mouseout',
    events: {
      mouseover: 'on',
      mouseout: 'off',
      'switchImage:on': 'on',
      'switchImage:off': 'off'
    },
    suffixes: {
      on: '-on',
      off: ''
    },
    classes: {
      on: "" + namespace + "-on",
      off: null
    },
    suffixSelectors: {},
    animation: {
      on: {
        opacity: 1
      },
      off: {
        opacity: 0
      },
      duration: 600
    },
    easing: {
      on: 'easeOutQuad',
      off: 'easeInQuad'
    }
  };

  $.fn[namespace] = {
    defaults: defaults
  };

  jQueryWidget = function(namespace, defaults, constructor) {
    return function(option) {
      var args;
      args = arguments;
      return this.each(function() {
        var $this, data, options;
        $this = $(this);
        data = $this.data(namespace);
        if (!data) {
          if (typeof option === 'object') {
            options = option;
          }
          if (options.animation) {
            options.animation = $.extend({}, defaults.animation, options.animation);
          }
          options = $.extend({}, defaults, options);
          $this.data(namespace, data = new constructor(this, options));
        }
        if (typeof option === 'string') {
          args = Array.prototype.slice.call(arguments, 0);
          args.shift();
          return data[option].apply(data, args);
        }
      });
    };
  };

  $.fn[namespace] = new jQueryWidget(namespace, defaults, SwitchImage = (function() {

    function SwitchImage(el, options) {
      var events, k, v, _ref;
      this.options = options;
      this.$el = $(el);
      events = [];
      _ref = this.options.events;
      for (k in _ref) {
        v = _ref[k];
        events.push(k);
      }
      this.$el.find(this.options.selector).on(events.join(' '), $.proxy(this.switchEvent, this));
      this.klass = "" + namespace + "-switch";
      this.init();
    }

    SwitchImage.prototype.init = function() {
      var that;
      that = this;
      this.$el.find(this.options.selector).each(function() {
        var $image, k, state, suffix, _ref, _results;
        $image = $(this).find(that.options.targetSelector);
        if (!($image.length > 0)) {
          return;
        }
        _ref = that.options.events;
        _results = [];
        for (k in _ref) {
          state = _ref[k];
          suffix = that.options.suffixes[state];
          if (suffix) {
            _results.push(that.loadSuffix(suffix, $image));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      return this.refresh(this);
    };

    SwitchImage.prototype.loadSuffix = function(suffix, $image) {
      var $switch, k, src, v, _ref;
      src = $image.attr('src').replace(/(@2x)?\./, "" + suffix + "$1.");
      $image.css('z-index', 100);
      $switch = $("<img src='" + src + "' class='" + this.klass + "'>").css('zIndex', 0).css('position', 'absolute').css('top', 0).css('left', 0);
      if (this.options.animation) {
        _ref = this.options.animation.off;
        for (k in _ref) {
          v = _ref[k];
          $switch.css(k, v);
        }
      }
      $image.data(namespace, $switch);
      return $image.parent().css('position', 'relative').append($switch);
    };

    SwitchImage.prototype.refresh = function() {
      var that;
      that = this;
      return this.$el.find(this.options.selector).each(function() {
        var selector, state, switched, _ref;
        switched = false;
        _ref = that.options.suffixSelectors;
        for (state in _ref) {
          selector = _ref[state];
          if ($(this).is(selector)) {
            switched = true;
            that.switchEvent({
              type: state,
              currentTarget: this
            });
          }
        }
        if (!switched) {
          return that.switchEvent({
            type: that.options.defaultState,
            currentTarget: this
          });
        }
      });
    };

    SwitchImage.prototype.switchEvent = function(ev) {
      var state;
      state = this.options.events[ev.type];
      return this["switch"](ev.currentTarget, state, ev);
    };

    SwitchImage.prototype["switch"] = function(el, state, ev, skipOthers) {
      var $el, $image, $switch, offset, suffix;
      if (ev == null) {
        ev = null;
      }
      if (skipOthers == null) {
        skipOthers = null;
      }
      suffix = this.options.suffixes[state];
      $el = $(el);
      if ($el.is(this.options.targetSelector)) {
        $image = $el;
      } else {
        $image = $el.find(this.options.targetSelector).not("." + this.klass);
      }
      if (!($image.length > 0)) {
        return;
      }
      if (ev && (ev.type === 'mouseout')) {
        offset = $image.offset();
        offset.right = offset.left + $image.width();
        offset.bottom = offset.top + $image.height();
        if (ev.pageX >= offset.left && ev.pageX <= offset.right && ev.pageY >= offset.top && ev.pageY <= offset.bottom) {
          return;
        }
      }
      $switch = $image.data(namespace);
      if ($switch && $image.width() && !$switch.css('width')) {
        $switch.width($image.width()).height($image.height());
      }
      return this.doSwitch(suffix, $image, $switch);
    };

    SwitchImage.prototype.doSwitch = function(suffix, $image, $switch) {
      var $el, $off, $on, addClass, anim, removeClass;
      if (suffix) {
        $on = $switch;
        $off = $image;
        addClass = this.options.classes.on;
        removeClass = this.options.classes.off;
      } else {
        $on = $image;
        $off = $switch;
        addClass = this.options.classes.off;
        removeClass = this.options.classes.on;
      }
      $el = $image.closest(this.options.selector);
      if (addClass) {
        $el.addClass(addClass);
      }
      if (removeClass) {
        $el.removeClass(removeClass);
      }
      anim = this.options.animation;
      if (anim.duration) {
        if ($on) {
          $on.stop();
          $on.animate(anim.on, anim.duration, this.options.easing.on || this.options.easing);
        }
        if ($off) {
          $off.stop();
          return $off.animate(anim.off, anim.duration, this.options.easing.off || this.options.easing);
        }
      } else {
        if ($on) {
          $on.css(anim.on);
        }
        if ($off) {
          return $off.css(anim.off);
        }
      }
    };

    return SwitchImage;

  })());

}).call(this);
